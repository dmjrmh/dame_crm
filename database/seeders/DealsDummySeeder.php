<?php

namespace Database\Seeders;

use App\Models\Deal;
use App\Models\Lead;
use App\Models\User;
use App\Models\Product;
use App\Models\Customer;
use App\Models\DealItem;
use Illuminate\Support\Str;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;

class DealsDummySeeder extends Seeder
{
  /**
   * Run the database seeds.
   */
  protected int $dealsPerSales = 5;

  public function run(): void
  {
    $salesUsers = User::query()->where('role', 'sales')->get();
    $products   = Product::query()->get();
    $manager    = User::query()->where('role', 'manager')->first();

    if ($salesUsers->isEmpty() || $products->isEmpty()) {
      $this->command->warn('Skip DealsDummySeeder: butuh minimal 1 user role=sales dan 1 product.');
      return;
    }

    foreach ($salesUsers as $sales) {
      $leads = Lead::query()->where('user_id', $sales->id)->get();
      if ($leads->isEmpty()) {
        $leads->push(
          Lead::create([
            'user_id'  => $sales->id,
            'name'     => "Lead {$sales->name}",
            'contact'  => '08' . random_int(100000000, 999999999),
            'email'    => Str::slug($sales->username ?? $sales->id) . '@lead.test',
            'address'  => 'Jl. Dummy ' . $sales->name,
            'status'   => 'New',
            'notes'    => 'Auto generated by DealsDummySeeder',
          ])
        );
      }

      for ($i = 1; $i <= $this->dealsPerSales; $i++) {
        DB::transaction(function () use ($sales, $leads, $products, $i, $manager) {
          $lead = $leads->random();
          $randomDate = now() ->startOfMonth() ->addDays(rand(0, now()->day - 1))->setTime(rand(8, 18), rand(0, 59));

          $customer = Customer::query()->firstOrCreate(
            ['lead_id' => $lead->id],
            [
              'user_id'  => $sales->id,
              'name'     => $lead->name,
              'contact'  => $lead->contact,
              'email'    => $lead->email,
              'address'  => $lead->address,
              'notes'    => 'Converted by DealsDummySeeder',
            ]
          );
          $itemsProducts = $products->shuffle()->take(random_int(1, 5));

          $deal = Deal::create([
            'user_id'           => $sales->id,
            'lead_id'           => $lead->id,
            'customer_id'       => $customer->id,
            'title'             => "Project {$sales->username} #{$i}",
            'date'              => $randomDate,
            'pipeline_stage_id' => 3,
            'amount'            => 0,
            'approval_status'   => 'pending',
            'approver_id'       => null,
            'approved_at'       => null,
          ]);

          $anyUnderPrice = false;
          $sumRevenue = 0;
          $sumHpp     = 0;

          foreach ($itemsProducts as $p) {
            $under = (bool) random_int(0, 1);

            $qty = random_int(1, 3);

            if ($under) {
              $discountPercent = [5, 10, 15][array_rand([5, 10, 15])];
              $unitPrice = round($p->sell_price * (1 - $discountPercent / 100));
              $anyUnderPrice = true;
            } else {
              $unitPrice = $p->sell_price;
            }

            DealItem::create([
              'deal_id'    => $deal->id,
              'product_id' => $p->id,
              'quantity'   => $qty,
              'unit_price' => $unitPrice,
            ]);

            $sumRevenue += $unitPrice * $qty;
            $sumHpp     += $p->cost_price * $qty;
          }

          $deal->amount = $sumRevenue;

          if (!$anyUnderPrice) {
            $deal->approval_status = 'approved';
            $deal->approved_at     = now();
            $deal->pipeline_stage_id = 4;
            $deal->approver_id     = $manager?->id;
            if ($lead->status !== 'Converted') {
              $lead->update(['status' => 'Converted']);
            }
          }

          $deal->save();

          $profit = $sumRevenue - $sumHpp;
          $this->command->info(sprintf(
            '[%s] %s: items=%d revenue=%s hpp=%s profit=%s status=%s',
            $sales->username,
            $deal->title,
            $itemsProducts->count(),
            number_format($sumRevenue, 0, ',', '.'),
            number_format($sumHpp, 0, ',', '.'),
            number_format($profit, 0, ',', '.'),
            $deal->approval_status
          ));
        });
      }
    }
  }
}
